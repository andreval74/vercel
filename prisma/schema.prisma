
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/sccafe_create2/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  walletAddress String    @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  tokens        Token[]
  saltSearches  SaltSearch[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Token {
  id              String   @id @default(cuid())
  name            String
  symbol          String
  decimals        Int      @default(18)
  totalSupply     String   // BigInt as string
  contractAddress String?  // Will be set after deployment
  salt            String   @unique
  saltHash        String   // The actual bytes32 salt
  predictedAddress String  // Address calculated before deployment
  deployedAddress  String? // Actual deployed address (should match predicted)
  deployed        Boolean  @default(false)
  deploymentTxHash String?
  deploymentDate  DateTime?
  
  // Creator info
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  ownerAddress    String   // Token owner address
  
  // Network info
  chainId         Int      @default(97) // BSC Testnet
  networkName     String   @default("BSC Testnet")
  
  // Payment info
  paymentAmount   String?  // Amount paid in BNBt
  paymentTxHash   String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("tokens")
}

model SaltSearch {
  id          String   @id @default(cuid())
  targetPattern String // Pattern user wants (e.g., "0x1234", "cafe", etc.)
  foundSalt   String?  // Salt that generates desired pattern
  foundAddress String? // Address that matches pattern
  status      String   @default("searching") // searching, found, failed
  attempts    Int      @default(0)
  maxAttempts Int      @default(10000)
  
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("salt_searches")
}

model AdminUser {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  role          String   @default("admin") // admin, super_admin
  permissions   String[] @default(["manage_tokens", "manage_users"])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin_users")
}

model SystemConfig {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}
